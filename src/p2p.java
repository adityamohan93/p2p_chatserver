
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * p2p.java
 *
 * Created on Sep 25, 2013, 11:02:03 AM
 */
/**
 *
 * @author Shreyansh
 */
public class p2p extends javax.swing.JFrame {
String myname;
int clientlimit=10;
int clientlimit1=10;
String slist="";
int i=0;
 String groupname;
 InetAddress IP,iip;
int clientsize=0;
int portp=9990;
int portno=9991;
int portc=9992;
int portchat=7993;
int tbit=74,fbits=100,fbite=110;
static ServerSocket ser,ser1,ser2,sos;
 LinkedList clientllist = new LinkedList();
 
     private List<Socket> clientlist = new ArrayList<Socket>();
     
     static       Socket sock,sock1,sock2,sock3 ;
   //  LinkedList clientlist = new LinkedList();
     LinkedList cl = new LinkedList();
    /** Creates new form p2p */
    public p2p() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame2 = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jFrame3 = new javax.swing.JFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField3 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Group Name", "User Online"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("Enter Group");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel2.setText("Select a group");

        jButton4.setText("Create New");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrame2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrame2Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFrame2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton3.setText("jButton3");

        jFrame1.setResizable(false);
        jFrame1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jFrame1WindowOpened(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jButton5.setText("Send");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Leave Group");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        jLabel3.setText("Users ");

        jButton7.setText("Exit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))))
                .addGap(33, 33, 33)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane5.setViewportView(jTextArea2);

        jButton8.setText("Close");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("back");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Send");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame3Layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(jButton9))
                    .addGroup(jFrame3Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addContainerGap())
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame3Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14));

        jButton1.setText("Enter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel1.setText("Enter a nick:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(41, 41, 41)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
myname=jTextField1.getText();
   

     new Thread(new Runnable() {
            public void run() {
                for(i=fbits;i<=fbite;i++) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jProgressBar1.setValue(100-(fbite-i));
                        }
                    });
                    try { Thread.sleep(500); } catch (InterruptedException e) {}
                }
            }
        }).start();
    /**
     new Thread(new Runnable() {

            @Override
            public void run() {
                try{
String subnet="172.31.72";

int timeout=3000;
   for (int j=1;j<=254;j++){
       String host=subnet + "." + j;
      
       if (available(host,80)){
           System.out.println(host + " is reachable");
           
          
           
       }
       else
           System.out.println(host+ "is not reachable");
   }
   
   setVisible(false);
    jFrame2.setVisible(true);
    jFrame2.setSize(600,300);
}
catch(Exception e)
{}
    
            }
        }
             
             
             ).start();
    
    **/
       
     new Thread(new Runnable() {

            @Override
            public void run() {
                  int n=jTable1.getRowCount();
     DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
  
    {for(int j=0;j<n;j++)
        model.removeRow(0);
    }   
                for(int ii=fbits;ii<fbite;ii++)
{
//String aaa="172.31."+tbit+"."+ii;
String aaa="192.168.0."+ii;
 if (available(aaa,portno)){
           System.out.println(aaa + " is reachable");
           model.addRow(new Object[]{aaa,""});
          
           
       }
       else
           System.out.println(aaa+ "is not reachable");

}
                setVisible(false);
    jFrame2.setVisible(true);
    jFrame2.setSize(600,300);
            }
        }).start();


   
    // TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
final DefaultListModel model1 = new DefaultListModel();
//    String aaa=JOptionPane.showInputDialog("Enter a name for the group");
   // System.out.println(aaa);
      int n=jTable1.getRowCount();
     DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
     
       IP = null;
       iip=null;
        try {
            IP = InetAddress.getLocalHost();
        } catch (UnknownHostException ex) {
          //  Logger.getLogger(Example3.class.getName()).log(Level.SEVERE, null, ex);
        }
//ystem.out.println("IP of my system is := "+IP.getHostAddress());
model.addRow(new Object[]{IP.getHostAddress(),""});
      try{ 
         new Thread(new Runnable() {

                @Override
                public void run() {
                    try{
                    ser = new ServerSocket(portno);
                    //sock = ser.accept();
                
                    }
                    catch(Exception e){}
                }
            }).start();
            
   
  
}
catch(Exception ex){
JOptionPane.showMessageDialog(this, ex.getMessage());
}
      
      
     
      
      
      
      
      
     try{ 
         ser1 = new ServerSocket(portc);
         
         new Thread(new Runnable() {

                @Override
                public void run() {
                   
         new Thread(new Runnable() {

                @Override
                public void run() {
                    while(true)
         {
                    try{
                       
                             // SimpleServer cs = null ;
  //	cs.listen(portc);                  
                        
                 
                //    sock = ser1.accept();
                  //clientlist.add(sock.getInetAddress());
                     sock = ser1.accept();
                  clientlist.add(sock);
                  clientllist.add(sock.getInetAddress());
                  
               clientsize=clientlist.size();
                //  for(i=0;i<3;i++){
               
               for (Socket s :  clientlist) 
    	{
    	    PrintWriter p = new PrintWriter(s.getOutputStream(), true);
    	    p.println(clientllist + "\n");	
    	}
    	System.out.println(clientllist + "\n");
                    
                  //PrintStream pr = new PrintStream(sock.getOutputStream());
            
       //     String tempe = clientlist;
                    
             
                    //      pr.println(clientlist);
                          
                         
             
               //   }
                 // cl.add(tm);
               //    System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
          //  int a=cl.size();
          
            //     model1.addElement(sock.getInetAddress());
                
             //       jList2.setModel(model1);
             
             
             
             System.out.println("linked list"+clientllist);
                      
                    }
                    catch(Exception e){}
                }
                }
                
            }).start();
            
         
                }
            }).start();
        
  
}
catch(Exception ex){
JOptionPane.showMessageDialog(this, ex.getMessage());
}
     
      
      try{
       ser2=new ServerSocket(portchat);
                 
                 new Thread(new Runnable() {

                            @Override
                            public void run() {
                                      while(true)
         {
                    try{
                       
                             // SimpleServer cs = null ;
  //	cs.listen(portc);                  
                        
                 
                //    sock = ser1.accept();
                  //clientlist.add(sock.getInetAddress());
                     sock2 = ser2.accept();
                 // clientlist.add(sock2);
                 // clientllist.add(sock2.getInetAddress());
                  
               //clientsize=clientlist.size();
                //  for(i=0;i<3;i++){
               
                      BufferedReader edd = new BufferedReader(new InputStreamReader(sock2.getInputStream()));
            String tmp = edd.readLine();
                     
                     
               for (Socket s1 :  clientlist) 
    	{
            PrintStream pp=new PrintStream(s1.getOutputStream());
    	    //PrintWriter p = new PrintWriter(s1.getOutputStream(), true);
    	    pp.println(tmp + "\n");	
    	}
    	System.out.println(tmp + "\n");
                   // jTextArea1.setText(jTextArea1.getText()+tmp+"\n");
                    
                  //PrintStream pr = new PrintStream(sock.getOutputStream());
            
       //     String tempe = clientlist;
                    
             
                    //      pr.println(clientlist);
                          
                         
             
               //   }
                 // cl.add(tm);
               //    System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
          //  int a=cl.size();
          
            //     model1.addElement(sock.getInetAddress());
                
             //       jList2.setModel(model1);
             
             
             
             System.out.println("linked list"+clientllist);
                      
                    }
                    catch(Exception e){}
                }
                            }
                        }).start();
             
      }
      catch(Exception e){}
      
        
     
     
     // System.out.println(""+clientlist);
    
     
     // System.out.println(""+clientlist);
    
    // TODO add your handling code here:
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
final DefaultListModel model = new DefaultListModel();
int halt=0;
    try{
   groupname=(String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
    System.out.println(""+groupname);
    
    
    IP = null;
    iip=null;
        try {
            IP = InetAddress.getLocalHost();
        } catch (UnknownHostException ex) {
            //Logger.getLogger(Example3.class.getName()).log(Level.SEVERE, null, ex);
        }
//System.out.println("IP of my system is := "+IP.getHostAddress());
  String myip=IP.getHostAddress();
  
 
          System.out.println(clientlist+"  "+myip+" "+groupname);
       //   cl.add(myip);
  //jList2.setListData(cl.toArray());
  
  if(myip.equals(groupname))//if i am server
  {
  //System.out.println("server");
     
     new Thread(new Runnable() {

                    @Override
                    public void run() {
                        
                      //  while((clientlimit1--)>0)
                        {
                       // assd.start();
                           
                  new Thread(new Runnable() {
                                @Override
                                public   void run() {
                              //    for(int i=1;i<4;i++)
                                  {
                                    
                                            try{
                                               sock1 = new Socket(groupname,portc);
                       //  assd.start();
                                              
                                        
            while (true)  
            {
                Scanner remoteIn = null;          
                                         remoteIn = new Scanner(sock1.getInputStream());
              //  int gg= sock1.getLocalPort();
                //                               System.out.println("ye hai port"+gg);
           //    if (remoteIn.hasNext("["))
             //      System.out.println("ook");
                                       
               
                String s = remoteIn.nextLine();
              if(s.contains("]")||s.contains(","))
              {
              System.out.println("ook");
              }
              else{
                  if(s.equals(""))
                  {}
                  else{
                  jTextArea1.setText(jTextArea1.getText()+s+"\n");
                  
                    InputStream in = new FileInputStream("message.wav");
                              AudioStream as = new AudioStream(in);
                              AudioPlayer.player.start(as);
                  
                  }
                   continue;
              }
                if(s.equals(""))
                  {
                   continue;
                }
                else
                {
                 System.out.println("ayya"+s);
            cl.clear();
            model.clear();
                   String xc="";
         for(int qq=0;qq<s.length();qq++)
          {
        if(s.charAt(qq)=='0'||s.charAt(qq)=='1'||s.charAt(qq)=='2'||s.charAt(qq)=='3'||s.charAt(qq)=='4'||s.charAt(qq)=='5'||s.charAt(qq)=='6'||s.charAt(qq)=='7'||s.charAt(qq)=='8'||s.charAt(qq)=='9'||s.charAt(qq)=='.')
           xc=xc+s.charAt(qq);
        
        else if(s.charAt(qq)==']'||s.charAt(qq)==',')
        {
            cl.add(xc);
            xc="";
                
        }
       
        
        
          }
                  // cl.add(tm);
                 //  System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
            int a=cl.size();
            for(int bb=0;bb<a;bb++)
                 model.addElement(cl.get(bb));
                
                    jList2.setModel(model);
                 
                }
               // serverText.append(s + "\n");  
//                message.requestFocus();  
               
            }
                                        
                                
                   /**   BufferedReader gt = new BufferedReader(new InputStreamReader(sock1.getInputStream()));
            
           String tm = gt.readLine();
           String xc="";
         for(int qq=0;qq<tm.length();qq++)
          {
        if(tm.charAt(qq)=='0'||tm.charAt(qq)=='1'||tm.charAt(qq)=='2'||tm.charAt(qq)=='3'||tm.charAt(qq)=='4'||tm.charAt(qq)=='5'||tm.charAt(qq)=='6'||tm.charAt(qq)=='7'||tm.charAt(qq)=='8'||tm.charAt(qq)=='9'||tm.charAt(qq)=='.')
           xc=xc+tm.charAt(qq);
        
        else if(tm.charAt(qq)==']'||tm.charAt(qq)==',')
        {
            cl.add(xc);
            xc="";
                
        }  
          }
                  // cl.add(tm);
                   System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
            int a=cl.size();
            for(int bb=0;bb<a;bb++)
                 model.addElement(cl.get(bb));
                
                    jList2.setModel(model);
                      **/    
            
                        }
                        
                    
                        catch(Exception e){}
                                }
                                }
                            }).start();
                            
                
                        }
                   }
                }).start();
    
  }
  
  else//if i am a client
  {
  //System.out.println("client");
      
      new Thread(new Runnable() {

                    @Override
                    public void run() {
                        
                      //  while((clientlimit1--)>0)
                        {
                       // assd.start();
                           
                  new Thread(new Runnable() {
                                @Override
                                public   void run() {
                              //    for(int i=1;i<4;i++)
                                  {
                                    
                                            try{
                                               sock1 = new Socket(groupname,portc);
                       //  assd.start();
                                              
                                        
            while (true)  
            {
                Scanner remoteIn = null;          
                                         remoteIn = new Scanner(sock1.getInputStream());
              //  int gg= sock1.getLocalPort();
                //                               System.out.println("ye hai port"+gg);
           //    if (remoteIn.hasNext("["))
             //      System.out.println("ook");
                                       
               
                String s = remoteIn.nextLine();
              if(s.contains("]")||s.contains(","))
              {
              System.out.println("ook");
              }
              else{
                  if(s.equals(""))
                  {}
                  else{
                  jTextArea1.setText(jTextArea1.getText()+s+"\n");
                  
                    InputStream in = new FileInputStream("message.wav");
                              AudioStream as = new AudioStream(in);
                              AudioPlayer.player.start(as);
                  
                  }
                   continue;
              }
                if(s.equals(""))
                  {
                   continue;
                }
                else
                {
                 System.out.println("ayya"+s);
            cl.clear();
            model.clear();
                   String xc="";
         for(int qq=0;qq<s.length();qq++)
          {
        if(s.charAt(qq)=='0'||s.charAt(qq)=='1'||s.charAt(qq)=='2'||s.charAt(qq)=='3'||s.charAt(qq)=='4'||s.charAt(qq)=='5'||s.charAt(qq)=='6'||s.charAt(qq)=='7'||s.charAt(qq)=='8'||s.charAt(qq)=='9'||s.charAt(qq)=='.')
           xc=xc+s.charAt(qq);
        
        else if(s.charAt(qq)==']'||s.charAt(qq)==',')
        {
            cl.add(xc);
            xc="";
                
        }
       
        
        
          }
                  // cl.add(tm);
                 //  System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
            int a=cl.size();
            for(int bb=0;bb<a;bb++)
                 model.addElement(cl.get(bb));
                
                    jList2.setModel(model);
                 
                }
               // serverText.append(s + "\n");  
//                message.requestFocus();  
               
            }
                                        
                                
                   /**   BufferedReader gt = new BufferedReader(new InputStreamReader(sock1.getInputStream()));
            
           String tm = gt.readLine();
           String xc="";
         for(int qq=0;qq<tm.length();qq++)
          {
        if(tm.charAt(qq)=='0'||tm.charAt(qq)=='1'||tm.charAt(qq)=='2'||tm.charAt(qq)=='3'||tm.charAt(qq)=='4'||tm.charAt(qq)=='5'||tm.charAt(qq)=='6'||tm.charAt(qq)=='7'||tm.charAt(qq)=='8'||tm.charAt(qq)=='9'||tm.charAt(qq)=='.')
           xc=xc+tm.charAt(qq);
        
        else if(tm.charAt(qq)==']'||tm.charAt(qq)==',')
        {
            cl.add(xc);
            xc="";
                
        }  
          }
                  // cl.add(tm);
                   System.out.println("@@"+tm);
          //  cl=(LinkedList)gt.readLine();
          // jList2.setListData(listData)
                   
                 //   for(int j=0;j<20;j++)
                    //  model.addElement(cl);
           // jList2.setListData(cl.toArray());
            int a=cl.size();
            for(int bb=0;bb<a;bb++)
                 model.addElement(cl.get(bb));
                
                    jList2.setModel(model);
                      **/    
            
                        }
                        
                    
                        catch(Exception e){}
                                }
                                }
                            }).start();
                            
                
                        }
                   }
                }).start();
  }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    jFrame2.setVisible(false);
    jFrame1.setVisible(true);
        jFrame1.setVisible(true);
    jFrame1.setSize(800,468);
    
    
    }
    catch(Exception e){}
    
    new Thread(new Runnable() {

            @Override
            public void run() {
                  try{
    sos=new ServerSocket(portp);
    
    
    int halt=0;
    while(true)
    {
        
        Socket sockk=sos.accept();
        
        if(halt==0)
        {
        jFrame3.setVisible(true);
      jFrame3.setSize(372,361);
        }
        
        halt=1;
     BufferedReader eed = new BufferedReader(new InputStreamReader(sockk.getInputStream()));
            String tmp = eed.readLine();
            System.out.println("tmp:"+tmp);
            String abc="",bbc="";
            
            int iiii=0;
             //System.out.println("Client "+tmp);
            if(tmp.equals(""))
                ;
            
            else{
                for(iiii=0;iiii<tmp.length();iiii++)
                {
                if(tmp.charAt(iiii)=='<')
                {
                    iiii++;
                    break;
                }
                
                else
                {
                abc=abc+tmp.charAt(iiii);
                }
                
                }
                
                for(int j=iiii;j<tmp.length();j++)
                {
                
                bbc=bbc+tmp.charAt(j);
                }
                
                //if(slist.equals(""))
                    slist=bbc;
                
            jTextArea2.setText(jTextArea2.getText()+abc+"\n");
            InputStream in = new FileInputStream("message.wav");
                              AudioStream as = new AudioStream(in);
                              AudioPlayer.player.start(as);
            }
    
    System.out.println("abc="+abc+"bbc="+bbc+"\n");
    }
    
    
    
    }
    catch(Exception e){}
               
            }
        }).start();
    
    
        // TODO add your handling code here:
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
  //  System.out.println(clientlist);
  //jList2.setListData(clientlist.toArray());

    jFrame1.setVisible(false);
    jFrame2.setVisible(true);

    jFrame2.setSize(600,300);
    
     
    
}//GEN-LAST:event_jButton6ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            sock3 = new Socket(groupname,portchat);
            
              
            PrintStream pr = new PrintStream(sock3.getOutputStream());
            
          String temp=jTextField2.getText();
            //System.out.print("Enter text: ");
          
            //InputStreamReader rd = new InputStreamReader(System.in);
            //BufferedReader ed = new BufferedReader(rd);
            
            //String temp = ed.readLine();
            
            pr.println(myname+":"+temp);
                jTextField2.setText("");
               // jTextArea1.setText(jTextArea1.getText()+"\nMe: "+temp);
            // TODO add your handling code here:
        } catch (Exception ex) {
            
        } 
}//GEN-LAST:event_jButton5ActionPerformed

private void jFrame1WindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowOpened

   
    // TODO add your handling code here:
}//GEN-LAST:event_jFrame1WindowOpened

private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed

    int keyp=evt.getKeyCode();
    
    if(keyp==10)
    {
    
    try {
            sock3 = new Socket(groupname,portchat);
            
              
            PrintStream pr = new PrintStream(sock3.getOutputStream());
            
          String temp=jTextField2.getText();
            //System.out.print("Enter text: ");
          
            //InputStreamReader rd = new InputStreamReader(System.in);
            //BufferedReader ed = new BufferedReader(rd);
            
            //String temp = ed.readLine();
            
            pr.println(myname+":"+temp);
            jTextField2.setText("");
               // jTextArea1.setText(jTextArea1.getText()+"\nMe: "+temp);
            // TODO add your handling code here:
        } catch (Exception ex) {
            
        } 
    }
    // TODO add your handling code here:
}//GEN-LAST:event_jTextField2KeyPressed

private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
System.exit(1);
// TODO add your handling code here:
}//GEN-LAST:event_jButton7ActionPerformed

private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked

   slist=  (String) jList2.getSelectedValue();
  if(slist.equals(""))
      ;
  
  else
  {
      jFrame3.setVisible(true);
      jFrame3.setSize(372,361);
      
      
  
}
    // TODO add your handling code here:
}//GEN-LAST:event_jList2MouseClicked

private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
// TODO add your handling code here:
    try{
        
        System.out.println("slist:"+slist);
      Socket sis=new Socket(slist, portp);
      
  //    while(true)
      {
         PrintStream pr = new PrintStream(sis.getOutputStream());
      
         String temp=jTextField3.getText();
         if(temp.equals(""))
             ;
         
         else{
         pr.println(myname+":"+temp+"<"+IP.getHostAddress());
         jTextArea2.setText(jTextArea2.getText()+myname+":"+temp+"\n");
         InputStream in = new FileInputStream("message.wav");
                              AudioStream as = new AudioStream(in);
                              AudioPlayer.player.start(as);
         }
      }
      
      }
      catch(Exception e){}
}//GEN-LAST:event_jButton10ActionPerformed

private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

    System.exit(1);
    // TODO add your handling code here:
}//GEN-LAST:event_jButton8ActionPerformed

private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

    jFrame3.setVisible(false);
    jTextArea2.setText("");
    // TODO add your handling code here:
}//GEN-LAST:event_jButton9ActionPerformed

private static boolean portAvailable;

private static boolean available(String ip,int port) {
    System.out.println("--------------Testing port " + port);
    Socket s = null;
   int delay = 500; // 1 s
        try {
            Socket socket = new Socket();
               
            socket.connect(new InetSocketAddress(ip,port), delay);
            portAvailable = socket.isConnected();
            socket.close();
            System.out.println("init() giving--->  " + portAvailable);
            return true;
        }
        catch (Exception e) {
            portAvailable = false;
            System.out.println("init() giving--->  " + portAvailable);
            System.out.println("Threw error---> " + e.getMessage());
            return false;
        }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p2p.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p2p.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p2p.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p2p.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new p2p().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
